{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tasks","setTasks","useState","title","setTitle","useEffect","fetchTasks","async","response","fetch","data","json","updateTask","id","updatedTask","method","headers","body","JSON","stringify","map","task","_jsxs","children","_jsx","onSubmit","e","preventDefault","newTask","type","value","onChange","target","placeholder","required","checked","completed","onClick","filter","deleteTask","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"wKAmFeA,MAjFf,WACI,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAOC,GAAYF,mBAAS,IAEnCG,qBAAU,KACNC,GAAY,GACb,IAEH,MAAMA,EAAaC,UACf,MAAMC,QAAiBC,MAAM,cACvBC,QAAaF,EAASG,OAC5BV,EAASS,EAAK,EAiBZE,EAAaL,MAAOM,EAAIC,KAC1B,MAAMN,QAAiBC,MAAM,cAAcI,IAAM,CAC7CE,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUL,KAEnBJ,QAAaF,EAASG,OAC5BV,EAASD,EAAMoB,KAAIC,GAASA,EAAKR,KAAOA,EAAKH,EAAOW,IAAO,EAU/D,OACIC,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,eACJD,eAAA,QAAMG,SApCElB,UACZmB,EAAEC,iBACF,MAAMnB,QAAiBC,MAAM,aAAc,CACvCM,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEhB,YAErByB,QAAgBpB,EAASG,OAC/BV,EAAS,IAAID,EAAO4B,IACpBxB,EAAS,GAAG,EAyBgBmB,SAAA,CACpBC,cAAA,SACIK,KAAK,OACLC,MAAO3B,EACP4B,SAAWL,GAAMtB,EAASsB,EAAEM,OAAOF,OACnCG,YAAY,WACZC,UAAQ,IAEZV,cAAA,UAAQK,KAAK,SAAQN,SAAC,gBAE1BC,cAAA,MAAAD,SACKvB,EAAMoB,KAAKC,GACRC,eAAA,MAAAC,SAAA,CACIC,cAAA,SACIK,KAAK,OACLC,MAAOT,EAAKlB,MACZ4B,SAAWL,GAAMd,EAAWS,EAAKR,GAAI,IAAKQ,EAAMlB,MAAOuB,EAAEM,OAAOF,UAEpEN,cAAA,SACIK,KAAK,WACLM,QAASd,EAAKe,UACdL,SAAWL,GAAMd,EAAWS,EAAKR,GAAI,IAAKQ,EAAMe,UAAWV,EAAEM,OAAOG,YAExEX,cAAA,UAAQa,QAASA,IAjClB9B,iBACTE,MAAM,cAAcI,IAAM,CAC5BE,OAAQ,WAEZd,EAASD,EAAMsC,QAAOjB,GAAQA,EAAKR,KAAOA,IAAI,EA6BP0B,CAAWlB,EAAKR,IAAIU,SAAC,aAXvCF,EAAKR,UAiBlC,ECrEe2B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHFS,IAASC,OACP3B,cAAC4B,IAAMC,WAAU,CAAA9B,SACfC,cAACzB,EAAG,MAENuD,SAASC,eAAe,SAG1Bf,G","file":"static/js/main.a108e1de.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n    const [tasks, setTasks] = useState([]);\n    const [title, setTitle] = useState('');\n\n    useEffect(() => {\n        fetchTasks();\n    }, []);\n\n    const fetchTasks = async () => {\n        const response = await fetch('/api/tasks');\n        const data = await response.json();\n        setTasks(data);\n    };\n\n    const addTask = async (e) => {\n        e.preventDefault();\n        const response = await fetch('/api/tasks', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ title })\n        });\n        const newTask = await response.json();\n        setTasks([...tasks, newTask]);\n        setTitle('');\n    };\n\n    const updateTask = async (id, updatedTask) => {\n        const response = await fetch(`/api/tasks/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedTask)\n        });\n        const data = await response.json();\n        setTasks(tasks.map(task => (task.id === id ? data : task)));\n    };\n\n    const deleteTask = async (id) => {\n        await fetch(`/api/tasks/${id}`, {\n            method: 'DELETE'\n        });\n        setTasks(tasks.filter(task => task.id !== id));\n    };\n\n    return (\n        <div>\n            <h1>To-Do List</h1>\n            <form onSubmit={addTask}>\n                <input\n                    type=\"text\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    placeholder=\"New task\"\n                    required\n                />\n                <button type=\"submit\">Add Task</button>\n            </form>\n            <ul>\n                {tasks.map((task) => (\n                    <li key={task.id}>\n                        <input\n                            type=\"text\"\n                            value={task.title}\n                            onChange={(e) => updateTask(task.id, { ...task, title: e.target.value })}\n                        />\n                        <input\n                            type=\"checkbox\"\n                            checked={task.completed}\n                            onChange={(e) => updateTask(task.id, { ...task, completed: e.target.checked })}\n                        />\n                        <button onClick={() => deleteTask(task.id)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}